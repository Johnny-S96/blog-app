{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/Loader/Loader.jsx","pages/Homepage/HomePage.jsx","pages/NotFoundPage/NotFoundPage.jsx","pages/PostDetailsPage/PostDetailsPage.jsx","App.jsx","index.js"],"names":["BASE_URL","getAllPosts","url","fetch","then","response","ok","json","Error","catch","addPost","post","a","method","body","JSON","stringify","deletePost","postId","PostsList","posts","isPostListChanged","switchPostListStatus","className","scope","map","id","title","to","type","onClick","Loader","HomePage","useState","setPosts","isLoading","switchLoadingStatus","newPostTitle","setPostTitle","newPostBody","setPostBody","useEffect","onSubmit","event","preventDefault","onPostAdd","placeholder","value","onChange","target","handlePostTitleChange","handlePostBodyChange","NotFoundPage","PostDetailsPage","App","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f65c74e.chunk.js","sourcesContent":["export const BASE_URL = 'https://bloggy-api.herokuapp.com';\n\nexport const getData = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Error');\n  })\n","import { getData, BASE_URL } from './api';\n\nexport const getAllPosts = () => getData('/posts')\n  .catch(() => []);\n\nexport const addPost = async(post) => {\n  await fetch(`${BASE_URL}/posts`, {\n    method: 'Post',\n    body: JSON.stringify(post),\n  });\n};\n\nexport const deletePost = async(postId) => {\n  await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { deletePost } from '../../api/posts';\n\nexport const PostsList = ({\n  posts,\n  isPostListChanged,\n  switchPostListStatus,\n}) => {\n  const onPostDelete = (postId) => {\n    deletePost(postId);\n    switchPostListStatus(!isPostListChanged);\n  }\n\n  return (\n    <div>\n      <h2>Post List</h2>\n      <table className=\"table\">\n        <thead>\n          <tr className=\"table-dark\">\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Post</th>\n            <th scope=\"col\">Go to</th>\n            <th scope=\"col\">Update post</th>\n            <th scope=\"col\">Delete post</th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} className=\"table-light\">\n              <th scope=\"row\">{post.id}</th>\n              <td>{post.title}</td>\n              <td>\n                <NavLink className=\"btn btn-primary\" to=\"/\">\n                  Details\n                </NavLink>\n              </td>\n              <td>\n                <NavLink className=\"btn btn-warning\" to=\"/post-details/:postId\">\n                  Update\n                </NavLink>\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-danger\"\n                  to=\"/post-details/:postId\"\n                  onClick={onPostDelete(post.id)}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport './Homepage.css';\nimport { getAllPosts, addPost } from '../../api/posts';\nimport { PostsList } from '../../components/PostsList';\nimport { Loader } from '../../components/Loader';\n\nexport const HomePage = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, switchLoadingStatus] = useState(false);\n  const [newPostTitle, setPostTitle] = useState('');\n  const [newPostBody, setPostBody] = useState('');\n  const [isPostListChanged, switchPostListStatus] = useState(false)\n\n  useEffect(() => {\n    switchLoadingStatus(true);\n    getAllPosts().then(posts => {\n      setPosts(posts)\n      switchLoadingStatus(false);\n    });\n  }, [isPostListChanged]);\n\n  const onPostAdd = event => {\n    event.preventDefault();\n    switchPostListStatus(!isPostListChanged);\n    \n    const newPost = {\n      title: newPostTitle,\n      body: newPostBody\n    };\n\n    addPost(newPost);\n  }\n\n  const handlePostTitleChange = ({ target }) => {\n    setPostTitle(target.value);\n  }\n\n  const handlePostBodyChange = ({ target }) => {\n    setPostBody(target.value);\n  }\n\n  return (\n    <div className=\"homepage\">\n      <form onSubmit={event => onPostAdd(event)}>\n        <h2>Create Post</h2>\n        <div className=\"input-group mb-3\">\n          <label className=\"input-group-text\" id=\"basic-addon2\">title</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Write here...\"\n            value={newPostTitle}\n            onChange={event => handlePostTitleChange(event)}\n          />\n        </div>\n        <div className=\"input-group\">\n          <label className=\"input-group-text\">body</label>\n          <textarea\n            className=\"form-control\"\n            placeholder=\"Write here...\"\n            value={newPostBody}\n            onChange={event => handlePostBodyChange(event)}\n          ></textarea>\n        </div>\n        <button className=\"btn btn-success\">\n          Create\n        </button>\n      </form>\n      {\n        isLoading\n          ? <Loader />\n          : (\n            <PostsList\n              posts={posts}\n              isPostListChanged={isPostListChanged}\n              switchPostListStatus={switchPostListStatus}\n            />\n          )\n      }\n    </div>\n  );\n}\n","export const NotFoundPage = () => (\n  <h1>Page Not Found</h1>\n);\n","import { NavLink } from 'react-router-dom';\n\nexport const PostDetailsPage = () => (\n  <div>\n    <h1>Hello</h1>\n    <NavLink className=\"btn btn-primary\" to=\"/\">\n      Go to Homepage\n    </NavLink>\n  </div>\n);\n","import './App.css';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { HomePage } from './pages/Homepage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PostDetailsPage } from './pages/PostDetailsPage';\n\nexport const App = () => (\n  <div className=\"App\">\n    <Switch>\n      <Route path=\"/\" exact>\n        <HomePage />\n      </Route>\n      <Route path=\"/post-details/:postId\">\n        <PostDetailsPage />\n      </Route>\n      <Redirect path=\"/home\" to=\"/\" />\n\n      <NotFoundPage />\n    </Switch>\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}